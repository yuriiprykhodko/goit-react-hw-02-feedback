{"version":3,"sources":["components/Statistics/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","positiveFeedBack","countTotalFeedback","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","prototype","PropTypes","func","isRequired","Section","title","children","Notification","message","App","state","setState","this","Math","round","Object","keys","total","Component","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRA0BeA,EAvBI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,iBACAC,EALiB,EAKjBA,mBALiB,OAOjB,sBAAKC,UAAU,QAAf,UACE,uBAAMA,UAAU,QAAhB,mBAA+BL,KAC/B,uBAAMK,UAAU,QAAhB,sBAAkCJ,KAClC,uBAAMI,UAAU,QAAhB,kBAA8BH,KAC9B,uBAAMG,UAAU,QAAhB,oBAAgCD,KAChC,uDAA0BD,EAA1B,Y,wBCZEG,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKH,UAAU,UAAf,SACGE,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEL,UAAU,SAEVM,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAJjC,SAMGA,GAJIA,SASbJ,EAAgBO,UAAY,CAC1Bb,KAAMc,IAAUC,KAAKC,WACrBf,QAASa,IAAUC,KAAKC,WACxBd,IAAKY,IAAUC,KAAKC,YAEPV,QCRAW,G,MAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKd,UAAU,QAAf,UACG,6BAAKa,IAELC,OCKUC,G,MATM,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAUE,EAAb,EAAaA,QAAb,OACnB,qCACE,oBAAIhB,UAAU,UAAd,SAAyBgB,IACzB,mCAAGF,SCCDG,G,iNAKJC,MAAQ,CACNvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPM,gBAAkB,SAAAE,GAAM,OACtB,EAAKc,UAAS,WACZ,OAAO,eACJd,EAAS,EAAKa,MAAMb,GAAU,O,4CAIrC,WACE,MAA+Be,KAAKF,MAA5BvB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjBE,EAAqBJ,EAAOE,EAAMD,EAClCE,EAAmBuB,KAAKC,MAAO3B,EAAOI,EAAsB,KAClE,OACE,qCACE,cAAC,EAAD,CAASc,MAAM,wBAAf,SACE,cAAC,EAAD,CACEX,QAASqB,OAAOC,KAAKJ,KAAKF,OAC1Bf,gBAAiBiB,KAAKjB,oBAG1B,cAAC,EAAD,CAASU,MAAM,YAAf,SACGd,EACC,cAAC,EAAD,CACEJ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACL4B,MAAO1B,EACPD,iBAAkBA,IAGpB,cAAC,EAAD,CAAckB,QAAQ,+B,GAxChBU,cAAZT,EACGU,aAAe,GA+CTV,QC3CAW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ef78e494.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Statistics.css';\r\nimport PropTypes from 'prop-types';\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  positiveFeedBack,\r\n  countTotalFeedback,\r\n}) => (\r\n  <div className=\"stats\">\r\n    <span className=\"value\">Good: {good}</span>\r\n    <span className=\"value\">Neutral: {neutral}</span>\r\n    <span className=\"value\">Bad: {bad}</span>\r\n    <span className=\"value\">Total: {countTotalFeedback}</span>\r\n    <span>Positive Feedback: {positiveFeedBack} %</span>\r\n  </div>\r\n);\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedBack: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport './FeedbackOptions.css';\r\nimport PropTypes from 'prop-types';\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div className=\"buttons\">\r\n    {options.map(option => (\r\n      <button\r\n        className=\"button\"\r\n        key={option}\r\n        type=\"button\"\r\n        onClick={() => onLeaveFeedback(option)}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\nFeedbackOptions.prototype = {\r\n  good: PropTypes.func.isRequired,\r\n  neutral: PropTypes.func.isRequired,\r\n  bad: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport './Section.css';\r\nimport PropTypes from 'prop-types';\r\nconst Section = ({ title, children }) => (\r\n  <div className=\"title\">\r\n    {<h2>{title}</h2>}\r\n\r\n    {children}\r\n  </div>\r\n);\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport './Notification.css';\r\nimport PropTypes from 'prop-types';\r\nconst Notification = ({ children, message }) => (\r\n  <>\r\n    <h2 className=\"message\">{message}</h2>\r\n    <>{children}</>\r\n  </>\r\n);\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\nimport './styles.css';\n\nclass App extends Component {\n  static defaultProps = {};\n\n  static propTypes = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  onLeaveFeedback = option =>\n    this.setState(() => {\n      return {\n        [option]: this.state[option] + 1,\n      };\n    });\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const countTotalFeedback = good + bad + neutral;\n    const positiveFeedBack = Math.round((good / countTotalFeedback) * 100);\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistic\">\n          {countTotalFeedback ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback}\n              positiveFeedBack={positiveFeedBack}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}